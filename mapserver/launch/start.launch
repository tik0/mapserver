<launch>

  <!-- These are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="update_rate" default="50.0"/> <!--Update rate for tfs and gazebo plugins-->

  
  <!--We assume that the robot is centered in the ROI-->
  <arg name="roi_width" value="6.0" /> <!-- (m) x -->
  <arg name="roi_height" value="6.0" /> <!-- (m) y -->
  <arg name="roi_altitude" value="0.0" /> <!-- (m) z NOT USED-->
  
  
  <!-- Map server -->
  <!-- This program produces tf'f from the tile_parent_tf to the center of the ROI ( These tf's
   have the name from tile_origin_tf_prefix: e.g.: map_base_link_#). From here, another tf is produced
   to a ROI origin for the maps ( For names tile_origin_tf_sufix_for_roi_origin are taken into
   account: e.g. map_base_link_#_ROI_ORIGIN). As soon as the odometry_topic steps over the
   bounding_box_*, a new ROI is produced and the number for the tf's "#" is increased.-->
  <node pkg="mapserver" name="tile_publisher" type="tile_publisher" output="screen">
    <param name="tile_origin_tf_prefix" type="string" value="map_base_link_" />
    <param name="tile_origin_tf_sufix_for_roi_origin" type="string" value="_ROI_ORIGIN" />
    <param name="tile_parent_tf" type="string" value="world" />
    <param name="odometry_topic" type="string" value="/amiro6/odom" />
    <param name="roi_too_origin_trans_width" value="$(eval -arg('roi_width') / 2)" />
    <param name="roi_too_origin_trans_height" value="$(eval -arg('roi_height') / 2)" />
    <param name="roi_too_origin_trans_altitude" value="$(eval -arg('roi_altitude') / 2)" />
    <param name="bounding_box_width" value="$(eval arg('roi_width') / 3)" />
    <param name="bounding_box_height" value="$(eval arg('roi_height') / 3)" />
    <param name="bounding_box_altitude" value="$(eval arg('roi_altitude') / 3)" />
  </node>

<!--  <node pkg="mapserver" name="mapserver_raw" type="mapserver_raw">
    world_link
    <param name="world_link" type="string" value="world" />
    <param name="tile_origin_tf_prefix" type="string" value="map_base_link_" />
    <param name="tile_origin_tf_sufix_for_roi_origin" type="string" value="_ROI_ORIGIN" />
    <param name="shift_map" type="int" value="1" />
    <param name="topic_laser" type="string" value="amiro5/laser/scan" />
    <param name="dont_store_maps" type="int" value="1" />
    <param name="send_top_layer_of_distancestack_as_ogm" type="int" value="1" />
    <param name="debug" type="int" value="0" />
    <param name="debug_draw_rpc_in_view" type="int" value="0" />
    <param name="max_x_m" value="$(eval arg('roi_width') / 2)" />
    <param name="max_y_m" value="$(eval arg('roi_height') / 2)" />
    <param name="min_x_m" value="$(eval -arg('roi_width') / 2)" />
    <param name="min_y_m" value="$(eval -arg('roi_height') / 2)" />
  </node>-->
  
  <node pkg="mapserver" name="mapserver_stat" type="mapserver_stat" respawn="true" output="screen">
    <param name="tile_origin_tf_prefix" type="string" value="map_base_link_" />
    <param name="tile_origin_tf_sufix_for_roi_origin" type="string" value="_ROI_ORIGIN" />
    <param name="current_tf_name_topic" type="string" value="/currentTfTile" />
    <param name="world_link" type="string" value="world" />
    <param name="resolution" value="0.02" />
    <param name="maxOccupancyUpdateCertainty" value="255" />
    <param name="max_distance_insertion" value="10" />
    <param name="ism_scope_prefix" type="string" value="amiro6/ism" />
    <param name="shift_map" type="int" value="1" />
    <param name="dont_store_maps" type="int" value="0" />
    <param name="debug" type="int" value="1" />
    <param name="debug_topic" value="/amiro6/ism/cam" />
    <param name="debug_draw_rpc_in_view" type="int" value="0" />
    <param name="max_x_m" value="$(eval arg('roi_width') / 2)" />
    <param name="max_y_m" value="$(eval arg('roi_height') / 2)" />
    <param name="min_x_m" value="$(eval -arg('roi_width') / 2)" />
    <param name="min_y_m" value="$(eval -arg('roi_height') / 2)" />
    <param name="rate" value="10" />
    <param name="map_storage_location" value="/tmp/" />
  </node>

  <!-- The robots -->
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find amiro_gazebo)/launch/gazebo.launch">
<!--     <arg name="world_name" value="$(find amiro_gazebo)/worlds/empty_slow.world"/> -->
    <arg name="world_name" value="$(find amiro_gazebo)/worlds/desk.world"/>
<!--     <arg name="world_name" value="$(find amiro_gazebo)/worlds/amiro.world"/> -->
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the AMiRo+camera with namespace amiro6 -->
  <include file="$(find amiro_description)/launch/amiro.launch" clear_params="true" ns="amiro6">
    <arg name="robot_name" value="amiro6" />
    <arg name="robot_position" value="-x 0.102226 -y -0.351070 -z 0.887186 -R 0 -P 0 -Y 0" />
    <arg name="update_rate" value="$(arg update_rate)" />
    <arg name="robot_model" value="amiro_camera_hokuyo.xacro" />
    <arg name="lid_sensor_pitch" value="0.785" />
  </include>

  <!-- Start rviz -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find mapserver)/launch/viz.rviz"/>
  
  <!-- ISM model for camera -->
  <include file="$(find image_inverse_sensor_model)/launch/image_to_ogm.launch">
<!--     <arg name="topicIns" value="/amiro6/front_camera/image_raw"/> -->
    <arg name="topicIns" value="/amiro6/front_camera/classified/image_raw"/>
    <arg name="topicOut" value="/amiro6/ism/cam"/>
    <arg name="parent_frame" value="amiro6/base_link"/>
    <arg name="grid_resolution" value="0.04"/>
    <arg name="imageWidth" value="800"/>
    <arg name="imageHeight" value="800"/>
    <arg name="object_extend" default="0.1"/>
    <arg name="cam_xTranslation" value="0.0495"/>
    <arg name="cam_yTranslation" value="0"/>
    <arg name="cam_zTranslation" value="0.033"/>
    <arg name="cam_pitch" value="0.0"/>
    <arg name="cam_yaw" value="0.0"/>
    <arg name="cam_FOV" value="0.987307318463"/> <!-- Half total viewing angle from corner to corner (rad) 1.3962634 * sqrt(2) / 2-->
  </include>
  
  <node name="hsvAnomalyClassification" pkg="hsvAnomalyClassification" type="hsvAnomalyClassification">
    <param name="input_topic" value="/amiro6/front_camera/image_raw"/>
    <param name="output_topic" value="/amiro6/front_camera/classified/image_raw"/>
    <param name="upperBoundary" value="0.0"/>
    <param name="lowerBoundary" value="0.2"/>
    <param name="debug" value="0"/>
  </node>

    
  <node name="ism_plane_detection" pkg="ism_plane_detection" type="ism_plane_detection">
    <param name="laser_input_topic" value="/amiro6/laser/scan"/>
    <param name="ogm_output_topic" value="/amiro6/ism/laser"/>
    <param name="resolution" value="0.02"/>
    <param name="upper_boundary" value="0.8"/>
    <param name="lower_boundary" value="0.2"/>
    <param name="fuzzy_intersection_m" value="0.02"/>
    <param name="width" value="1.0"/>
    <param name="depth" value="1.0"/>
    <param name="base_frame_id" value="amiro6/base_link"/>
    <param name="debug" value="0"/>
  </node>
  
</launch>
