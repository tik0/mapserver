<?xml version="1.0"?>
 <launch>
  <!-- ISM Mapserver -->
  <!--We assume that the robot is centered in the ROI-->
  <arg name="roi_width" value="6.0" /> <!-- (m) x -->
  <arg name="roi_height" value="6.0" /> <!-- (m) y -->
  <arg name="roi_altitude" value="0.0" /> <!-- (m) z NOT USED-->
  
  
  <!-- Map server -->
  <!-- This program produces tf'f from the tile_parent_tf to the center of the ROI ( These tf's
   have the name from tile_origin_tf_prefix: e.g.: map_base_link_#). From here, another tf is produced
   to a ROI origin for the maps ( For names tile_origin_tf_sufix_for_roi_origin are taken into
   account: e.g. map_base_link_#_ROI_ORIGIN). As soon as the odometry_topic steps over the
   bounding_box_*, a new ROI is produced and the number for the tf's "#" is increased.-->
  <node pkg="mapserver" name="tile_publisher" type="tile_publisher" output="screen">
    <param name="tile_origin_tf_prefix" type="string" value="map_base_link_" />
    <param name="tile_origin_tf_sufix_for_roi_origin" type="string" value="_ROI_ORIGIN" />
    <param name="tile_parent_tf" type="string" value="world" />
    <param name="odometry_topic" type="string" value="/amiro6/odom" />
    <param name="roi_too_origin_trans_width" value="$(eval -arg('roi_width') / 2)" />
    <param name="roi_too_origin_trans_height" value="$(eval -arg('roi_height') / 2)" />
    <param name="roi_too_origin_trans_altitude" value="$(eval -arg('roi_altitude') / 2)" />
    <param name="bounding_box_width" value="$(eval arg('roi_width') / 3)" />
    <param name="bounding_box_height" value="$(eval arg('roi_height') / 3)" />
    <param name="bounding_box_altitude" value="$(eval arg('roi_altitude') / 3)" />
    <param name="tf_publish_rate" value="50" />
<!--     <param name="current_tuple_topic" value="/currentTuple" /> -->
    
    <!-- tf_name_publish_delay is one of the most crucial parameters. It is the difference in seconds between sending
    the new tf tree and the reference name to it. The delay means, that all listening process get some time to build
    up their tf tree for the new map tile, because their might be sensor messages which are delayed due to processing.
    If for instance an delayed sensor message arrives, it can not be transformed because extrapolation in the past is 
    not possible (Note: For extrapolation in the future one has just to wait).
    -->
    <param name="tf_name_publish_delay" value="2.0" />
    <param name="tf_tile_history" value="-1" />
  </node>

<!--  <node pkg="mapserver" name="mapserver_raw" type="mapserver_raw">
    world_link
    <param name="world_link" type="string" value="world" />
    <param name="tile_origin_tf_prefix" type="string" value="map_base_link_" />
    <param name="tile_origin_tf_sufix_for_roi_origin" type="string" value="_ROI_ORIGIN" />
    <param name="shift_map" type="int" value="1" />
    <param name="topic_laser" type="string" value="amiro5/laser/scan" />
    <param name="dont_store_maps" type="int" value="1" />
    <param name="send_top_layer_of_distancestack_as_ogm" type="int" value="1" />
    <param name="debug" type="int" value="0" />
    <param name="debug_draw_rpc_in_view" type="int" value="0" />
    <param name="max_x_m" value="$(eval arg('roi_width') / 2)" />
    <param name="max_y_m" value="$(eval arg('roi_height') / 2)" />
    <param name="min_x_m" value="$(eval -arg('roi_width') / 2)" />
    <param name="min_y_m" value="$(eval -arg('roi_height') / 2)" />
  </node>-->
  
<?undefined
  <!--launch-prefix="gdb -ex run --args"-->
?>
  <node pkg="mapserver" name="mapserver_stat" type="mapserver_stat_node" respawn="true" output="screen">
    <param name="tile_origin_tf_prefix" type="string" value="map_base_link_" />
    <param name="tile_origin_tf_sufix_for_roi_origin" type="string" value="_ROI_ORIGIN" />
    <param name="current_tf_name_topic" type="string" value="/currentTfTile" />
<!--     <param name="current_tuple_topic" type="string" value="/currentTuple" /> -->
    <param name="world_link" type="string" value="odom" />
    <param name="resolution" value="0.02" />
    <param name="req_topic_map_stack" type="string" value="/reqMapStack" />
    <param name="max_occupancy_update_certainty" value="255" />
    <param name="max_distance_insertion" value="10" />
    <param name="ism_scope_prefix" type="string" value="amiro6/ism" />
    <param name="shift_map" type="int" value="1" />
    <param name="dont_store_maps" type="int" value="0" />
    <param name="debug" type="int" value="1" />
    <param name="debug_topic" value="/amiro6/ism/cam" />
    <param name="debug_ism_topic" value="/amiro6/ism/laser" />
    <param name="debug_draw_rpc_in_view" type="int" value="0" />
    <param name="max_x_m" value="$(eval arg('roi_width') / 2)" />
    <param name="max_y_m" value="$(eval arg('roi_height') / 2)" />
    <param name="min_x_m" value="$(eval -arg('roi_width') / 2)" />
    <param name="min_y_m" value="$(eval -arg('roi_height') / 2)" />
    <param name="rate" value="10" />
    <param name="map_storage_location" value="/tmp/" />
    <param name="storage_map_name" value="OGM" />
    <param name="storage_format_name" value="" />
    <param name="storage_unit_name" value="logodds" />
    <param name="mapInit_value" type="int" value="0" />
<!--     <rosparam command="load" file="$(find mapserver)/yaml/blindspots.yaml" /> -->
  </node>
 </launch>

<?undefined
mapInit_value look-up for mapserver_stat
0.000: -127
0.010: -77
0.020: -66
0.030: -60
0.040: -51
0.050: -48
0.060: -45
0.070: -43
0.080: -39
0.090: -38
0.100: -36
0.110: -35
0.120: -32
0.130: -31
0.140: -30
0.150: -28
0.160: -27
0.170: -26
0.180: -25
0.190: -23
0.200: -22
0.210: -22
0.220: -21
0.230: -19
0.240: -19
0.250: -18
0.260: -17
0.270: -16
0.280: -15
0.290: -15
0.300: -14
0.310: -13
0.320: -12
0.330: -12
0.340: -11
0.350: -10
0.360: -10
0.370: -9
0.380: -8
0.390: -7
0.400: -7
0.410: -6
0.420: -5
0.430: -5
0.440: -4
0.450: -3
0.460: -3
0.470: -2
0.480: -2
0.490: -1
0.500: 0
0.510: 0
0.520: 1
0.530: 2
0.540: 2
0.550: 3
0.560: 4
0.570: 4
0.580: 5
0.590: 5
0.600: 6
0.610: 7
0.620: 7
0.630: 9
0.640: 9
0.650: 10
0.660: 10
0.670: 11
0.680: 12
0.690: 12
0.700: 13
0.710: 14
0.720: 15
0.730: 15
0.740: 16
0.750: 17
0.760: 18
0.770: 19
0.780: 20
0.790: 21
0.800: 22
0.810: 22
0.820: 24
0.830: 25
0.840: 26
0.850: 27
0.860: 29
0.870: 30
0.880: 31
0.890: 33
0.900: 35
0.910: 36
0.920: 38
0.930: 41
0.940: 43
0.950: 45
0.960: 48
0.970: 55
0.980: 60
0.990: 66
1.000: 77
?>